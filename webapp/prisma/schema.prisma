// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String?
  role                  UserRole               @default(USER)
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  shoppingList          ShoppingList[]         @relation("userShoppingListCreated")
  listItems             ListItem[]             @relation("userListItemCreated")

  @@index([id, email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(cuid())
  email    String
  emailOld String?
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// app
model ShoppingList {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String
  notes         String?
  createdBy     User?      @relation("userShoppingListCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  listItems     ListItem[] @relation("includedInShoppingList")
}

model ListItem {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  name           String
  notes          String?
  createdBy      User?        @relation("userListItemCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId  String?
  shoppingList   ShoppingList @relation("includedInShoppingList", fields: [shoppingListId], references: [id], onDelete: Cascade)
  shoppingListId String
}
